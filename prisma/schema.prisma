// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ---------- NextAuth Required Models ----------
//

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]    // relation with bookings
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime

  @@unique([identifier, token])
}

//
// ---------- Booking Models ----------
//

enum BookingStatus {
  PENDING     // user created but not paid
  CONFIRMED   // after fake payment step
  CANCELLED   // if user cancels
}

model Booking {
  id            String       @id @default(cuid())
  userId        String
  username      String
  email         String
  mobile        String
  pickupAddress String
  destination   String
  vehicle       String
  pickupTime    DateTime?
  days          Int?
  notes         String?
  status        BookingStatus @default(PENDING)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // relations
  user     User     @relation(fields: [userId], references: [id])
  payment  Payment?
}

//
// ---------- Payment Model ----------
//

enum PaymentStatus {
  PENDING
  PAID
}

model Payment {
  id         String        @id @default(cuid())
  bookingId  String        @unique
  amount     Int
  status     PaymentStatus @default(PENDING)
  createdAt  DateTime      @default(now())

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

